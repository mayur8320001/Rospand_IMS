@model Rospand_IMS.Models.OutwardEntryCreateViewModel

@{
    ViewData["Title"] = $"Create Outward Entry for SO# {Model.SONumber}";
}

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Create Outward Entry for SO# @Model.SONumber</h3>
    </div>
    <div class="card-body">
        <form asp-action="CreateOutwardEntry" method="post" id="outwardForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Sales Order</label>
                        <input type="hidden" asp-for="SalesOrderId" />
                        <input type="hidden" asp-for="SONumber" />
                        <input type="hidden" asp-for="CustomerDisplayName" />

                        <input class="form-control" value="@Model.SONumber - @Model.CustomerDisplayName" readonly />
                        <span asp-validation-for="SONumber" class="text-danger"></span>
                        <span asp-validation-for="CustomerDisplayName" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label asp-for="OutwardNumber"></label>
                        <input asp-for="OutwardNumber" class="form-control" readonly />
                        <span asp-validation-for="OutwardNumber" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label asp-for="OutwardDate"></label>
                        <input asp-for="OutwardDate" class="form-control" type="date" required />
                        <span asp-validation-for="OutwardDate" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label asp-for="WarehouseId" class="control-label"></label>
                        <select asp-for="WarehouseId" id="warehouseSelect" class="form-control select2" required>
                            <option value="">-- Select Warehouse --</option>
                            @foreach (var warehouse in Model.Warehouses)
                            {
                                <option value="@warehouse.Value">@warehouse.Text</option>
                            }
                        </select>
                        <span asp-validation-for="WarehouseId" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label asp-for="Notes"></label>
                <textarea asp-for="Notes" class="form-control" rows="3"></textarea>
            </div>

            <h4 class="mt-4">Items to Dispatch</h4>
            <div class="table-responsive">
                <table class="table table-bordered table-hover" id="itemsTable">
                    <thead class="thead-light">
                        <tr>
                            <th>Product</th>
                            <th>Ordered</th>
                            <th>Dispatched</th>
                            <th>Remaining</th>
                            <th>Reserved</th>
                            <th>Dispatch Qty</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Items.Count; i++)
                        {
                            var remainingToDispatch = Model.Items[i].QuantityOrdered - Model.Items[i].QuantityDispatched;
                            <tr class="@(Model.Items[i].QuantityAvailable < remainingToDispatch ? "table-warning" : "")">
                                <td>
                                    <input type="hidden" asp-for="Items[i].ProductId" />
                                    <input type="hidden" asp-for="Items[i].ProductName" />
                                    <input type="hidden" asp-for="Items[i].ProductSKU" />
                                    <input type="hidden" asp-for="Items[i].QuantityOrdered" />
                                    <input type="hidden" asp-for="Items[i].QuantityDispatched" />
                                    <input type="hidden" asp-for="Items[i].QuantityAvailable" class="reserved-input" />
                                    @Model.Items[i].ProductName (@Model.Items[i].ProductSKU)
                                </td>
                                <td>@Model.Items[i].QuantityOrdered</td>
                                <td>@Model.Items[i].QuantityDispatched</td>
                                <td>@remainingToDispatch</td>
                                <td class="reserved-qty">@Model.Items[i].QuantityAvailable</td>
                                <td>
                                    <input asp-for="Items[i].Quantity" class="form-control dispatch-qty" min="0" max="@Model.Items[i].QuantityAvailable" value="0" required />
                                    <span asp-validation-for="Items[i].Quantity" class="text-danger"></span>
                                </td>
                                <td>
                                    <input asp-for="Items[i].Notes" class="form-control" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="form-group mt-4">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Create Outward Entry
                </button>
                <a asp-action="Details" asp-controller="SalesOrder" asp-route-id="@Model.SalesOrderId" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Order
                </a>
            </div>
        </form>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/plugins/select2/css/select2.min.css">
    <style>
        .select2-container .select2-selection--single {
            height: 38px;
            border: 1px solid #ced4da;
        }

        .table th, .table td {
            vertical-align: middle;
        }

        .stock-warning {
            color: #dc3545;
            font-weight: bold;
        }

        .table-warning td {
            background-color: #fff3cd;
        }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/plugins/select2/js/select2.min.js"></script>
    <script>
        $(document).ready(function () {
            // Initialize select2
            $('.select2').select2();

            // Initialize quantity validation
            initQuantityValidation();

            // Warehouse change handler
            $('#warehouseSelect').change(function () {
                var warehouseId = $(this).val();
                if (warehouseId) {
                    updateReservedQuantities(warehouseId);
                } else {
                    resetQuantities();
                }
            });

            function initQuantityValidation() {
                $('.dispatch-qty').each(function () {
                    var $input = $(this);
                    var max = parseFloat($input.attr('max')) || 0;
                    var val = parseFloat($input.val() || 0);

                    if (val > max) {
                        $input.val(max);
                    }

                    var $row = $input.closest('tr');
                    var reserved = parseFloat($row.find('.reserved-qty').text());
                    var remaining = parseFloat($row.find('td:nth-child(4)').text());

                    if (reserved < remaining) {
                        $row.addClass('table-warning');
                        $row.find('.reserved-qty').addClass('stock-warning');
                    }
                });

                // Validate on quantity change
                $('.dispatch-qty').on('input', function() {
                    var $input = $(this);
                    var max = parseFloat($input.attr('max')) || 0;
                    var val = parseFloat($input.val() || 0);

                    if (val > max) {
                        $input.val(max);
                    }
                });
            }

            function updateReservedQuantities(warehouseId) {
                // Show loading state
                $('#itemsTable tbody').addClass('loading');

                $.ajax({
                    url: '@Url.Action("GetWarehouseReservedInventory", "SalesOrder")',
                    type: 'GET',
                    data: {
                        warehouseId: warehouseId,
                        productIds: $('input[name*="ProductId"]').map(function () {
                            return $(this).val();
                        }).get()
                    },
                    success: function (data) {
                        $('#itemsTable tbody tr').each(function () {
                            var productId = $(this).find('input[name*="ProductId"]').val();
                            var inventory = data.find(i => i.productId == productId);
                            var reservedQty = inventory ? inventory.quantityReserved : 0;
                            var remainingQty = parseFloat($(this).find('td:nth-child(4)').text());
                            var maxQty = Math.min(remainingQty, reservedQty);

                            // Update display
                            $(this).find('.reserved-qty').text(reservedQty);
                            $(this).find('.reserved-input').val(reservedQty);

                            // Update input field
                            var $qtyInput = $(this).find('.dispatch-qty');
                            $qtyInput.attr('max', maxQty);
                            $qtyInput.attr('data-max', maxQty);

                            // Reset current value if it exceeds new max
                            var currentVal = parseFloat($qtyInput.val() || 0);
                            if (currentVal > maxQty) {
                                $qtyInput.val(maxQty);
                            }

                            // Update warning state
                            $(this).toggleClass('table-warning', reservedQty < remainingQty);
                            $(this).find('.reserved-qty').toggleClass('stock-warning', reservedQty < remainingQty);
                        });
                    },
                    error: function () {
                        alert('Failed to fetch reserved inventory data.');
                    },
                    complete: function() {
                        $('#itemsTable tbody').removeClass('loading');
                    }
                });
            }

            function resetQuantities() {
                $('#itemsTable tbody tr').each(function () {
                    $(this).find('.reserved-qty').text('0');
                    $(this).find('.reserved-input').val('0');
                    $(this).find('.dispatch-qty').val('0').attr('max', 0);
                    $(this).removeClass('table-warning');
                    $(this).find('.reserved-qty').removeClass('stock-warning');
                });
            }

            // Form submission validation
            $('#outwardForm').on('submit', function(e) {
                var warehouseSelected = $('#warehouseSelect').val();
                if (!warehouseSelected) {
                    e.preventDefault();
                    alert('Please select a warehouse');
                    return false;
                }

                var hasItemsToDispatch = false;
                $('.dispatch-qty').each(function() {
                    if (parseFloat($(this).val()) > 0) {
                        hasItemsToDispatch = true;
                        return false; // break loop
                    }
                });

                if (!hasItemsToDispatch) {
                    e.preventDefault();
                    alert('Please specify quantities for at least one item to dispatch');
                    return false;
                }

                return true;
            });
        });
    </script>
}