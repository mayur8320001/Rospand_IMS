// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rospand_IMS.Data;

#nullable disable

namespace Rospand_IMS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250526111631_userSup")]
    partial class userSup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Rospand_IMS.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Rospand_IMS.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Rospand_IMS.Models.CostCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDirectCost")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CostCategories");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PaymentTermId")
                        .HasColumnType("int");

                    b.Property<string>("Salutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<bool>("ShippingSameAsBilling")
                        .HasColumnType("bit");

                    b.Property<string>("TRNNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaxTypeId")
                        .HasColumnType("int");

                    b.Property<string>("WorkPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Rospand_IMS.Models.InventoryTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("InventoryTransactions");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Pages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dashboard",
                            SectionId = 1,
                            Url = "/Home/Index"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Category Master",
                            SectionId = 2,
                            Url = "/Category/Index"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Product Master",
                            SectionId = 2,
                            Url = "/Product/Index"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Unit Master",
                            SectionId = 2,
                            Url = "/Units/Index"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Payment Terms",
                            SectionId = 2,
                            Url = "/PaymentTerms/Index"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Tax Master",
                            SectionId = 2,
                            Url = "/Tax/Index"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Countries",
                            SectionId = 2,
                            Url = "/Country/Index"
                        },
                        new
                        {
                            Id = 8,
                            Name = "States",
                            SectionId = 2,
                            Url = "/State/Index"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Cities",
                            SectionId = 2,
                            Url = "/City/Index"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Customer Master",
                            SectionId = 3,
                            Url = "/Customer/Index"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Vendor Master",
                            SectionId = 4,
                            Url = "/Vendor/Index"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Purchase Order",
                            SectionId = 4,
                            Url = "/PurchaseOrder/Index"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Manage Users",
                            SectionId = 5,
                            Url = "/User/ManageUsers"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Roles",
                            SectionId = 5,
                            Url = "/User/Roles"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Summary Report",
                            SectionId = 6,
                            Url = "/Report/Summary"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Detailed Report",
                            SectionId = 6,
                            Url = "/Report/Detailed"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Campaigns",
                            SectionId = 7,
                            Url = "/Marketing/Campaigns"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Analytics",
                            SectionId = 7,
                            Url = "/Marketing/Analytics"
                        });
                });

            modelBuilder.Entity("Rospand_IMS.Models.PaymentTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NetDays")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentTerms");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "View"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Edit"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("Rospand_IMS.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CostCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("MinimumStockLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OpeningStock")
                        .HasColumnType("int");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RatePer")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ReorderQuantity")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("SalesPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CostCategoryId");

                    b.HasIndex("UnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Rospand_IMS.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PONumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("Rospand_IMS.Models.PurchaseOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItems");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsEditable = false,
                            Name = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Rospand_IMS.Models.RolePagePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PageId", "PermissionId");

                    b.HasIndex("PageId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePagePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PageId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 2,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 2,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 2,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 3,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 3,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 3,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 4,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 4,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 4,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 5,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 5,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 5,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 6,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 6,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 6,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 7,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 7,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 7,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 8,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 8,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 8,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 9,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 9,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 9,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 10,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 10,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 10,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 11,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 11,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 11,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 12,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 12,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 12,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 13,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 13,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 13,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 14,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 14,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 14,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 15,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 15,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 15,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 16,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 16,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 16,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 17,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 17,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 17,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 18,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 18,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PageId = 18,
                            PermissionId = 3
                        });
                });

            modelBuilder.Entity("Rospand_IMS.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dashboard"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Master Pages"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sales"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Purchase"
                        },
                        new
                        {
                            Id = 5,
                            Name = "User Management"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Reports"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Marketing"
                        });
                });

            modelBuilder.Entity("Rospand_IMS.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("Rospand_IMS.Models.TaxType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaxTypes");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Rospand_IMS.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = "$2a$11$G2wB8fX77/HZ8mGafpvTKupeQBdNt6D4HKPnQve69KIcXOwO1/SsO",
                            RoleId = 1,
                            Username = "superadmin"
                        });
                });

            modelBuilder.Entity("Rospand_IMS.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PaymentTermId")
                        .HasColumnType("int");

                    b.Property<string>("Salutation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<bool>("ShippingSameAsBilling")
                        .HasColumnType("bit");

                    b.Property<string>("TRNNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaxTypeId")
                        .HasColumnType("int");

                    b.Property<string>("VendorDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Address", b =>
                {
                    b.HasOne("Rospand_IMS.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Rospand_IMS.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Rospand_IMS.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Rospand_IMS.Models.City", b =>
                {
                    b.HasOne("Rospand_IMS.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Customer", b =>
                {
                    b.HasOne("Rospand_IMS.Models.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("Rospand_IMS.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Rospand_IMS.Models.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId");

                    b.HasOne("Rospand_IMS.Models.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");

                    b.HasOne("Rospand_IMS.Models.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId");

                    b.Navigation("BillingAddress");

                    b.Navigation("Currency");

                    b.Navigation("PaymentTerm");

                    b.Navigation("ShippingAddress");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Rospand_IMS.Models.InventoryTransaction", b =>
                {
                    b.HasOne("Rospand_IMS.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rospand_IMS.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Page", b =>
                {
                    b.HasOne("Rospand_IMS.Models.Section", "Section")
                        .WithMany("Pages")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Product", b =>
                {
                    b.HasOne("Rospand_IMS.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rospand_IMS.Models.CostCategory", "CostCategory")
                        .WithMany()
                        .HasForeignKey("CostCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rospand_IMS.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CostCategory");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Rospand_IMS.Models.PurchaseOrder", b =>
                {
                    b.HasOne("Rospand_IMS.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Rospand_IMS.Models.PurchaseOrderItem", b =>
                {
                    b.HasOne("Rospand_IMS.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rospand_IMS.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Rospand_IMS.Models.RolePagePermission", b =>
                {
                    b.HasOne("Rospand_IMS.Models.Page", "Page")
                        .WithMany("RolePagePermissions")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rospand_IMS.Models.Permission", "Permission")
                        .WithMany("RolePagePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rospand_IMS.Models.Role", "Role")
                        .WithMany("RolePagePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Rospand_IMS.Models.State", b =>
                {
                    b.HasOne("Rospand_IMS.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Rospand_IMS.Models.User", b =>
                {
                    b.HasOne("Rospand_IMS.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Vendor", b =>
                {
                    b.HasOne("Rospand_IMS.Models.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("Rospand_IMS.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Rospand_IMS.Models.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId");

                    b.HasOne("Rospand_IMS.Models.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");

                    b.HasOne("Rospand_IMS.Models.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId");

                    b.Navigation("BillingAddress");

                    b.Navigation("Currency");

                    b.Navigation("PaymentTerm");

                    b.Navigation("ShippingAddress");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Page", b =>
                {
                    b.Navigation("RolePagePermissions");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Permission", b =>
                {
                    b.Navigation("RolePagePermissions");
                });

            modelBuilder.Entity("Rospand_IMS.Models.PurchaseOrder", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Role", b =>
                {
                    b.Navigation("RolePagePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Rospand_IMS.Models.Section", b =>
                {
                    b.Navigation("Pages");
                });
#pragma warning restore 612, 618
        }
    }
}
